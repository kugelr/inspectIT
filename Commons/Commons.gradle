apply plugin: 'net.saliman.cobertura'
apply plugin: 'de.aaschmid.cpd'
defaultTasks "commonsReleaseAndAnalyze"
//defaultTasks "myTask"

//some commons specific properties
ext {
	distJarName = "inspectit-commons"
	pluginName = "info.novatec.inspectit.commons"
}

configurations {
	compile {
		extendsFrom configurations.commonsProd
		extendsFrom configurations.commonsTest
	}
}

task downloadJava15 {
	//download from ftp server if zip file does not already exist
	File java15zip = new File("${java15RuntimePath}/${ftpInternalJava15runtimeFile}")
	if(!java15zip.exists()){
		ant {
			taskdef(name: 'ftp', classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP', classpath: configurations.commonsProd.asPath) 
			ftp(action: "get", server: "${ftpServer}", userid: "${ftpUser}", password: "${ftpPw}", remotedir: "${ftpInternalJava15runtimePath}") {
				fileset(dir: "${java15RuntimePath}") {
					include(name: "${ftpInternalJava15runtimeFile}")
				}
			}	
		}
	}
	else {
		println "${ftpInternalJava15runtimeFile} already exists in ${java15RuntimePath} - Skipping FTP download"
	}
	outputs.file java15zip
}

task unzipJava15 (type: Copy, dependsOn: downloadJava15){
	//takes the downloaded file from task:downloadJava15 and unzips it
	from zipTree(tasks.downloadJava15.outputs.files[0])
	into file("${java15RuntimePath}")
	include 'rt.jar'
}

executeTestNG {
	classpath += configurations.commonsProd
	classpath += configurations.commonsTest
	classpath += files(project(':Commons').sourceSets.main.java.srcDirs)
	classpath += files(project(':Commons').sourceSets.test.java.srcDirs)
	classpath += files(project(':Commons').sourceSets.main.output)
	classpath += files(project(':Commons').sourceSets.test.output)
}

compileJava {
	sourceCompatibility = '1.5'
	targetCompatibility = '1.5'

	options.bootClasspath = "${java15RuntimePath}/rt.jar"
	options.compilerArgs << "-Xlint:unchecked"
	options.debug = 'true'
	options.fork = 'true'
}
	
compileTestJava {
	sourceCompatibility = '1.5'
	targetCompatibility = '1.5'
	
	options.bootClasspath = "${java15RuntimePath}/rt.jar"
	options.compilerArgs << "-Xlint:unchecked"
	options.debug = 'true'
	options.fork = 'true'
}

jar {
	libsDirName = 'release'
	archivesBaseName = "${distJarName}"
}

//don't get the functional difference between cpd{} and cpdCheck{}
//somehow those tasks/configuration overwrite each other
cpdCheck {
	source = sourceSets.main.allJava
	ignoreFailures = true
	reports {
		xml {
			enabled = true
			destination = file("${buildQAAnalysisCPD}/main.xml")
		}
	}
}

//somehow i would like to outsource this to the subprojects of the inspectIT.gradle
//but if i do so the coverageReportDir will set to default
//i think i has something to do with the baseDir property which is not created dynamically
// configuriation of corbertura
cobertura {
	//instrumatation
	coverageInputDatafile = file("${buildQATestCoveragedata}/coberturaIn.ser")
	
	coverageDirs = ["${buildInstrumentedClasses}"] 
	coverageIncludes = ['info.novatec.inspectit.*']
	coverageExcludes = ['info.novatec.inspectit.*.test.*', 'info.novatec.inspectit.*.*_Stub.*']
	auxiliaryClasspath += files("${buildInstrumentedClasses}")
	auxiliaryClasspath += configurations.commonsProd
	
	//reporting
	coverageOutputDatafile = file("${buildQATestCoveragedata}/coberturaOut.ser")
	coverageReportDatafile = file("${buildQATestCoveragedata}/coberturaOut.ser")
	
	coverageReportDir = file("${buildQATestCoveragedata}")
	coverageFormats = ['xml', 'html']	
}

task commonsRelease {
	dependsOn(jar, unzipJava15)
	compileJava.mustRunAfter(unzipJava15)
}

task commonsAnalyze {
	dependsOn(':Commons:coberturaCheck', ':Commons:executeTestNG', ':Commons:pmdMain', ':Commons:checkstyleMain', ':Commons:findbugsMain', ':Commons:cpdCheck',':Commons:cpdHtmlReport')
}

task commonsReleaseAndAnalyze(type: Delete) {
	dependsOn(commonsAnalyze, commonsRelease, build)
	commonsRelease.mustRunAfter(commonsAnalyze)
}